# Dokumentace k projektu

## Základní informace

**Název projektu:** OmegaCars  
**Autor:** Filip Novotný
**Kontaktní údaje:** filipnovotny0902@gmail.com   
**Datum vypracování:** 5. dubna 2025  
**Název školy:** Střední průmyslová škola elektrotechnická, Praha 2, Ječná 30 
> *Tento dokument byl vytvořen v rámci školního projektu.*


## Specifikace požadavků uživatele / Use Case

### Popis zadaných údajů:
Uživatel zadává následující informace:
- **Značka**
- **Model**
- **Objem (l)**
- **Najeté km**
- **Palivo**
- **Převodovka**
- **Výkon (kW)**
- **Stáří**

### Hlavní funkce aplikace:
Aplikace na základě zadaných údajů předpovídá přibližnou cenu automobilu pomocí regresních modelů.

### Grafické znázornění:
Doporučujeme vytvořit jednoduchý UML Use Case diagram, který znázorní, jak uživatel zadává údaje a získává výsledek.

## Popis architektury aplikace

### Textový přehled hlavních modulů:

- **Web scraping:**  
  Moduly jako `autoesa.py` a `sauto_scraper.py` slouží ke stahování dat z webových stránek. Využívají knihovny jako `requests` a `BeautifulSoup` k parsování HTML obsahu a extrakci relevantních informací (značka, model, cena, atd.).

- **Čištění a úprava dat:**  
  Soubory jako `clean_dataset.py`, `clean_motor.py` a `normalize_utils.py` zajišťují:
  - Odstranění duplicitních záznamů a prázdných řádků.
  - Normalizaci textových údajů (odstranění diakritiky, sjednocení názvů značek).
  - Konverzi číselných hodnot a filtrování extrémních hodnot.

- **Slučování datasetů a analýza:**  
  Moduly jako `merge.py`, `selector.py` a `cars_info.py`:
  - Kombinují data získaná z různých zdrojů (např. Autoesa a Sauto).
  - Provádějí analýzu a selekci dat, což vytváří jednotný a vyvážený dataset pro trénink a predikci.

- **Predikce a uživatelské rozhraní:**  
  Modul `app.py` obsahuje grafické uživatelské rozhraní vytvořené pomocí knihovny `tkinter`. Umožňuje uživateli:
  - Zadávat vstupní parametry (značka, model, objem, najeté km, palivo, převodovka, výkon, stáří).
  - Spustit předpověď ceny automobilu pomocí předtrénovaných regresních modelů.

### UML Class (nebo modulové) diagramy:

- **Návrh diagramu:**  
  Vytvořte diagram, který znázorňuje vztahy mezi těmito moduly. Například:
  - **AutoScraper:** Třída zodpovědná za získávání a parsování dat z webových stránek.
  - **DataCleaner:** Třída, která implementuje funkce pro čištění a normalizaci dat.
  - **DatasetMerger:** Třída, která slučuje data z různých zdrojů do jednoho datasetu.
  - **PricePredictor:** Třída, která načítá předtrénované modely a poskytuje metodu pro predikci ceny na základě vstupních údajů.
  
  Diagram můžete vytvořit v nástrojích jako draw.io nebo Lucidchart a vložit jako obrázek do dokumentace.

### Deployment diagram:

- **Návrh diagramu nasazení:**  
  Nakreslete diagram, který ukazuje, jak jsou jednotlivé komponenty nasazeny:
  - **Scraping skripty:** Jsou spouštěny na serveru nebo lokálně a pravidelně stahují data z webových stránek.
  - **Zpracování dat:** Skripty pro čištění, úpravu a slučování dat běží buď na stejném stroji, nebo v odděleném prostředí.
  - **Uživatelské rozhraní:** Aplikace s GUI (`app.py`) běží lokálně a komunikuje s předtrénovanými modely pro předpověď cen.
  
  Tento diagram pomáhá pochopit, kde se která část aplikace nachází a jak mezi sebou spolupracují. Stejně jako u Class diagramu, Deployment diagram můžete vytvořit pomocí nástroje jako draw.io a vložit do dokumentace.

## Popis chodu aplikace (behaviorální diagramy)

### UML Activity / State Diagram

Tento diagram znázorňuje tok činností v aplikaci:

1. **Vstup uživatele:**  
   Uživatel zadá potřebné údaje (značka, model, objem, najeté km, palivo, převodovka, výkon, stáří) do grafického uživatelského rozhraní.

2. **Validace a příprava dat:**  
   Zadání jsou ověřena a zpracována – například konverze číselných hodnot a zakódování kategorií pomocí LabelEncoderů.

3. **Zpracování dat:**  
   Data jsou připravena pro vstup do předtrénovaného regresního modelu (sestavení feature vectoru).

4. **Předpověď ceny:**  
   Vybraný regresní model (např. Random Forest, Lineární regrese) na základě připravených vstupů předpovídá cenu automobilu.

5. **Zobrazení výsledku:**  
   Predikovaná cena je zobrazena v GUI, případně spolu s dalšími informacemi (např. interval spolehlivosti).

Diagram lze vytvořit pomocí nástroje jako draw.io či Lucidchart a následně vložit jako obrázek do dokumentace. Tento diagram pomáhá rychle pochopit, jak probíhá celý proces od zadání údajů po zobrazení výsledného výstupu.

## Schéma importu/exportu dat

### Popis formátu CSV souborů:

Aplikace pracuje s následujícími CSV soubory:

- **final_dataset.csv:**  
  Slouží jako hlavní dataset, který obsahuje vyčištěná a sloučená data z různých zdrojů. Obsahuje informace jako:  
  - Značka  
  - Model  
  - Objem (l)  
  - Najeté km  
  - Cena  
  - Palivo  
  - Převodovka  
  - Výkon (kW)  
  - Stáří  

- **auta_autoesa.csv:**  
  Obsahuje data získaná z webu AutoESA, včetně základních informací o vozidle. Obsahuje primárně položky jako:  
  - Značka  
  - Model  
  - Objem (l)  
  - Rok  
  - Najeté km  
  - Cena  
  - Palivo  
  - Převodovka  
  - Výkon (kW)

- **auta_sauto_cleaned.csv:**  
  Jedná se o data z webu Sauto, která byla před zpracováním vyčištěna a normalizována. Obsahuje obdobné informace jako soubor `auta_autoesa.csv`.

### Povinné a nepovinné položky:

- **Povinné položky:**  
  - Značka  
  - Model  
  - Cena  
  - Palivo  
  - Převodovka  
  Tyto položky jsou klíčové pro správnou analýzu a předpověď cen automobilů.

- **Nepovinné položky:**  
  - Objem (l)  
  - Najeté km  
  - Výkon (kW)  
  - Stáří  
  Tyto položky doplňují informace, které mohou zlepšit přesnost předpovědi, ale nejsou kritické pro základní funkčnost aplikace.

## Konfigurace aplikace

### Přehled konfiguračních možností:
- **Cesty k datasetům:**  
  Uvádějí se absolutní nebo relativní cesty k souborům s daty, jako jsou `final_dataset.csv`, `auta_autoesa.csv`, `auta_sauto_cleaned.csv`.  
- **Nastavení prostředí:**  
  Konfigurace zahrnuje nastavení proměnných prostředí (např. pomocí .env souboru), které definují parametry web scrapingu, počty inzerátů, maximální počet stránek, maximální počet paralelních vláken apod.  
- **Parametry pro web scraping:**  
  Parametry jako cenové filtry (minimální a maximální cena), výběr značky (např. "Audi", "Skoda" apod.), a další specifika, která ovlivňují načítání dat z webových stránek.

### Postup konfigurace:
1. **Úprava .env souboru:**  
   V kořenovém adresáři projektu se nachází soubor `.env`, kde lze nastavit proměnné jako `BRAND`, `NUM_LISTINGS`, `MAX_PAGES`, `MAX_WORKERS`, `OUTPUT_DIR`, `MIN_PRICE`, `MAX_PRICE` a další.  
2. **Úprava cest k souborům:**  
   Ujistěte se, že v kódu (např. v `app.py` nebo dalších modulech) jsou správně nastaveny cesty k datasetům a dalším zdrojům dat.  
3. **Kontrola závislostí:**  
   Před spuštěním aplikace zkontrolujte, zda jsou nainstalovány všechny potřebné knihovny, které jsou uvedeny v dokumentaci (pandas, numpy, tkinter, scikit-learn, requests, BeautifulSoup, atd.).  
4. **Spuštění aplikace:**  
   Po provedení konfigurace spusťte aplikaci podle pokynů uvedených v souboru `README.txt`, kde jsou detailně popsány kroky instalace a spuštění.

Tento postup zajišťuje, že aplikace bude správně konfigurována a připravena ke spuštění v požadovaném prostředí.

## Instalace a spuštění aplikace

### Detailní popis instalace:
1. **Nainstalujte potřebné knihovny a závislosti:**
   Ujistěte se, že máte nainstalovaný Python 3. Následující knihovny jsou nutné:
   - pandas
   - numpy
   - tkinter (obvykle součástí Pythonu, nebo instalujte např. pomocí `sudo apt-get install python3-tk` na Linuxu)
   - scikit-learn
   - requests
   - BeautifulSoup4 (bs4)
   - python-dotenv (pro načítání konfiguračních proměnných ze souboru .env)

   Pro instalaci všech knihoven najednou můžete využít příkaz (pokud máte soubor `requirements.txt`, použijte):
   ```bash
   pip install pandas numpy scikit-learn requests beautifulsoup4 python-dotenv

## Chybové stavy a jejich řešení

### Seznam možných chyb:
- **Neplatné vstupy:**  
  Uživatel může zadat údaje ve špatném formátu (např. text místo čísla, záporné hodnoty), což může způsobit selhání validace vstupů.

- **Chyba při načítání dat:**  
  CSV soubory s daty nemusí být nalezeny nebo mohou mít nesprávnou strukturu, což brání správnému načtení a zpracování dat.

- **Problémy při predikci:**  
  Mohou nastat chyby během výpočtu předpovědi, například pokud se předtrénovaný model nedokáže načíst, nebo pokud model vrátí nečekané výsledky (např. zápornou cenu).

- **Interní chyby aplikace:**  
  Neočekávané chyby, které mohou vzniknout při běhu aplikace, například v důsledku chyb v kódu nebo nedostatečné paměti.

### Postupy řešení chyb:
- **Neplatné vstupy:**  
  - Zkontrolujte, zda zadáváte údaje ve správném formátu (např. čísla pro objem, najeté km, výkon, stáří).
  - Ujistěte se, že všechny numerické hodnoty jsou kladné.
  - Pokud aplikace vyhodí chybovou zprávu, opravte vstupy podle pokynů v hlášení.

- **Chyba při načítání dat:**  
  - Ověřte, zda jsou CSV soubory umístěny na správných cestách a mají očekávanou strukturu.
  - Pokud soubor neexistuje nebo je poškozen, upravte cesty v konfiguračních souborech a zkontrolujte soubor README.txt pro pokyny.

- **Problémy při predikci:**  
  - Zkontrolujte integritu předtrénovaných modelů a ujistěte se, že jsou správně načteny.
  - Pokud model vrátí zápornou hodnotu nebo dojde k jiné chybě, podívejte se do logů aplikace, abyste zjistili příčinu problému.
  - V případě selhání predikce zvažte nastavení záložní hodnoty nebo upozornění uživatele, že došlo k chybě při výpočtu.

- **Interní chyby aplikace:**  
  - Sledujte chybové zprávy a logy v terminálu či konzoli.
  - Pokud se objeví neočekávaná chyba, kontaktujte autora projektu s podrobným popisem situace a chybovým hlášením.

## Seznam použitých třetích knihoven

Aplikace využívá následující externí knihovny:
- **pandas:** Pro manipulaci a analýzu dat, načítání CSV souborů a jejich zpracování.
- **numpy:** Pro práci s numerickými daty a matematické operace.
- **tkinter:** Pro tvorbu grafického uživatelského rozhraní (GUI).
- **scikit-learn:** Pro strojové učení a předpověď pomocí regresních modelů.
- **requests:** Pro odesílání HTTP požadavků při web scrapingu.
- **BeautifulSoup (bs4):** Pro parsování HTML a extrakci dat z webových stránek.
- **python-dotenv:** Pro načítání konfiguračních proměnných ze souboru .env.

## Závěrečné resumé projektu

Projekt "OmegaCars – Předpověď cen automobilů" je školní aplikace zaměřená na předpověď přibližné ceny vozu na základě vstupních údajů zadaných uživatelem. Aplikace úspěšně integruje několik modulů, jako je web scraping, čištění a slučování dat, analýza a předpověď pomocí regresních modelů a interaktivní grafické uživatelské rozhraní.

**Dosažené výsledky:**
- **Funkčnost aplikace:**  
  Uživatel zadá údaje (značka, model, objem, najeté km, palivo, převodovka, výkon, stáří) a aplikace na základě těchto vstupů předpovídá přibližnou cenu automobilu. Předtrénované regresní modely (např. Random Forest, Lineární regrese) byly úspěšně integrovány a laděny.
  
- **Zpracování dat:**  
  Data byla získána pomocí web scrapingu z různých zdrojů, vyčištěna, normalizována a následně slučena do jednotného datasetu. Tato data slouží jako podklad pro trénink i predikci.

- **Analýza a statistiky:**  
  Aplikace nabízí přehled o průměrných cenách, četnosti výskytu různých značek a modelech, což může pomoci při hlubší analýze trhu s automobily.

**Doporučení pro budoucí rozvoj:**
- **Rozšíření datasetu:**  
  V budoucnu lze zahrnout další zdroje dat nebo rozšířit stávající dataset o další relevantní proměnné, což by mohlo zlepšit přesnost predikcí.
  
- **Vylepšení modelů:**  
  Experimentovat s pokročilejšími algoritmy strojového učení nebo optimalizovat současné modely může vést k lepší přesnosti a robustnosti predikcí.
  
- **Rozšíření funkcionality GUI:**  
  Přidání dalších funkcí v uživatelském rozhraní, například možnost vizualizace statistických analýz nebo export výsledků, by mohlo zvýšit uživatelskou přívětivost aplikace.
  
- **Automatizace aktualizací dat:**  
  Implementace automatizovaného procesu pro pravidelné stahování a zpracování dat by zajistila aktuálnost datasetu a nepřetržitou funkčnost aplikace.

Celkově projekt splňuje požadavky školního zadání a poskytuje solidní základ pro další rozvoj a vylepšení v oblasti predikce cen automobilů.






